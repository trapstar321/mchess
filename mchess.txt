na serveru je gejm

	pozicije od a1 do h8
	mapiranje slova u broj
	dvodimenzionalno polje za ploču

	kontrole za svaku figuru za kretanje
	kontrola da nema neka druga figura na ciljnoj poziciji
	kontrola da li šah na kralju
	kontrola da li je pat
	kontrola da li je mat

klase
	ploča
	figura
    move - ima sve pozicije u potezu
         - generira ih figure klasa
         - imate će vrijeme kada je potez napravljen
         - field da označi da li je pojedena figura
         - field da označi da li je šah, mat pat
         - field da označi da li je potez validan

treba zamijeniti nakon poteza početnu poziciju sa Blank


klijent nema nikakve kontrole samo miče figure kad mu server potvrdi

6,4 bijeli
				self.position[0]-position[0]==-2
4,4 bijeli

knight cells for highlighting
7,1 -> 6,1 -> 5,1 -> 5,0
  x1-x2 = 2
  y1-y2 = 1
  x>y (x se mijenja 2 put)
        (y je isti 2 put)

5,2 -> 4,2 -> 4,1 -> 4,0
  x1-x2=1
  y1-x2=2
  y > x (y se mijenja 2 put)
          (x je isti 2 put)

5,2 -> 4,2 -> 4,3 -> 4,4
  x1-x2 = 1
  y1-y2 = 2
  y > x (y se mijenja 2 put)
          (x je isti 2 put)

4,4 -> 4,3 -> 4,2 -> 5,2
  x1-x2 = 1
  y1-y2 = 2
  y > x (y se mijenja 2 put)
          (x je isti 2 put)

4,4 -> 4,5 -> 4,6 -> 5,6
  x1-x2 = 1
  y1-y2 = 2
  y > x (y se mijenja 2 put)
          (x je isti 2 put)

3,6 -> 3,5 -> 4,5 -> 5,5
  x1-x2 = 2
  y1-y2 = 1
  x > > (x se mijenja 2 put)
            (y je isti 2 put)


jedenja figura:
    board - napraviti novi Blank i zamijeniti u dvodim polju
    gui - napraviti novi blank button i zamijeniti u grid-u sa starim od figure
          bg je od pojedene figure

    pojedena figura postoji samo u Move objektu ako ima reference na Move objekt


micanje:
    prebaciti kod u Figure klasu koji provjeri da li figura preskače druge figure
    + još check da li je target iz drugog tima


game objekt - veza između dva klijenta
            - ima board objekt

message_forwarder -> samo pozove message_processor
message_processor -> nađe game prema id-ju klijenta
                     proslijedi message game objektu

poruke:
    login - neki simple dictionary sa username-ovima za sad
          - da se može kod rekonekta nastaviti gejm

    connected
    disconnected - kada se jedan od klijenata diskonektira

    treba popraviti server da kod diskonekta kreira poruku u read_queue (client_id=id od onog koji se diskonektao)
     da bi message_processor mogao javiti drugom klijentu

    connected i disconnected (ne treba poruka koja ima cijelu listu klijenata)
        - message processor mora imati listu klijenata
        - to znači da bi handler mora kreirati connected poruku da dođe do message processora
        - message processor bi trebao raditi broadcast liste na sve klijente
        - ako se konektira klijent koji je već u gejmu onda ne treba njega slat u listi

    želiš igrati
    da / ne
    create game
       - kada se dobije ovaj message onda se šalje joined message obojici klijenata
    move
    move ok
    move error
    swap
    eat
    checkmate - gui bi trebao prikazati da je kraj igre
    stalemate - gui bi trebao prikazati da je kraj igre
    check     - gui bi trebao prikazati upozorenje

klijent
    metode za micanje, join itd.
    gui kreira klijenta i poziva te metode kada korisnik napravi neku akciju
    ne treba message processor za klijenta, nego će gui čitati read queue direktno

    kada dobije listu klijenata, osvježi prozor sa klijentima ako je prikazan inače ignore

    ima 3 prozora, i svi imaju metodu za procesiranje poruka koja vrati poruke za server kada obradi poruke
    gui bi trebao proslijediti poruku trenutnom prozoru kada nađe novu poruku
    metoda za procesiranje bi trebala vratiti da li se prozor zatvara i koji se sljedeći prozor otvara

    1. login
    2. lista
    3. board

lobby server
game server

lobby server vrati klijentu kada dogovori gejm na koji gejm server da se spoji
game server ima samo jedan handler


broadcast logged in samo onima koji su logged in

kad se logira sakriti login button, dodati disconnect button
send request button -> SM_GAMEREQUEST (client_id) s kojim se želi igrati
                                       - šalje na server klijent koji želi pozvati nekog u gem
                    <- SM_GAMEREQUEST (client_id) client_id = osoba koja šalje request
                                       - šalji na klijenta kojem se šalje zahtjev

accept/decline request - preko nekog dijaloga
                       SM_ACCEPT, SM_DECLINE

u handler od klijenta postaviti flag na 2 ako dođe do connection errora

kontrola da se request ne može poslati više puta na istog klijenta

disconnected - ukloniti sve request-a za tog klijenta na serveru
             - ukloniti sa klijenta request od diskonetanog klijenta i request poslan na tog klijenta

implementirati accept, reject i cancel

accept implementirati

označavanje canceled i rejected request-ova

generirati 1x key na login serveru za novi gejm - ima username od oba klijenta
                    vratiti svakom useru key
                    lista servera, odabrati jedan, vratiti klijentima na koji se server moraju spojiti

kada se otkaže request, disconnecta klijent disablati buttonse koji se ne bi smjeli moći kliknut

kad se accepta request, sender dobije poruku da li želi igrati

u message procesoru od gejm servera provjeriti da li su se oba klijenta spojila i startati novi gejm
                    {user1}{user2}
                    gejm server mora 2x dobiti taj ključ, kad dobije može kreirati novi gejm
